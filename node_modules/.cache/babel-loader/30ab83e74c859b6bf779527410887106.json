{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/processoseletivo/tractian/src/_context/Provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { node } from 'prop-types';\nimport fetchApi from '../_services/fetchApi';\nimport MachineContext from './MachineContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Provider({\n  children\n}) {\n  _s();\n\n  const [assets, setAssets] = useState([]);\n  const [status, setStatus] = useState([]);\n  const [count, setCount] = useState([]);\n  useEffect(() => {\n    async function fetchAssets() {\n      const result = await fetchApi();\n      console.log(result); // const data = await result.data;\n      // console.log(result.data)\n\n      const counting = await result.reduce((acc, asset) => {\n        if (!acc[asset.status] && asset.status) {\n          acc[asset.status] = 1;\n        } else {\n          acc[asset.status] = acc[asset.status] + 1;\n        }\n\n        return acc;\n      }, {});\n      console.log(Object.keys(counting)); // const status = Object.keys(counting);\n      // const count = Object.value(counting);\n\n      setAssets(result);\n      setStatus(status);\n      setCount(count);\n    }\n\n    fetchAssets();\n  }, []);\n  const contextValue = {\n    assets,\n    status,\n    count\n  };\n  return /*#__PURE__*/_jsxDEV(MachineContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Provider, \"/pVXj+Hhd+rrIYmxSJ42I0kj1mw=\");\n\n_c = Provider;\nProvider.propTypes = {\n  children: node\n}.isRequired;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/home/gabriel/processoseletivo/tractian/src/_context/Provider.js"],"names":["React","useState","useEffect","node","fetchApi","MachineContext","Provider","children","assets","setAssets","status","setStatus","count","setCount","fetchAssets","result","console","log","counting","reduce","acc","asset","Object","keys","contextValue","propTypes","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAAA;;AAC9B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeY,WAAf,GAA6B;AAC3B,YAAMC,MAAM,GAAG,MAAMX,QAAQ,EAA7B;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAF2B,CAG3B;AACA;;AACA,YAAMG,QAAQ,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACnD,YAAI,CAACD,GAAG,CAACC,KAAK,CAACX,MAAP,CAAJ,IAAsBW,KAAK,CAACX,MAAhC,EAAwC;AACtCU,UAAAA,GAAG,CAACC,KAAK,CAACX,MAAP,CAAH,GAAoB,CAApB;AACD,SAFD,MAEO;AACLU,UAAAA,GAAG,CAACC,KAAK,CAACX,MAAP,CAAH,GAAoBU,GAAG,CAACC,KAAK,CAACX,MAAP,CAAH,GAAoB,CAAxC;AACD;;AACD,eAAOU,GAAP;AACD,OAPsB,EAOpB,EAPoB,CAAvB;AASAJ,MAAAA,OAAO,CAACC,GAAR,CAAYK,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAZ,EAd2B,CAgB3B;AACA;;AAEAT,MAAAA,SAAS,CAACM,MAAD,CAAT;AACAJ,MAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;;AACDE,IAAAA,WAAW;AACZ,GAzBQ,EAyBN,EAzBM,CAAT;AA2BA,QAAMU,YAAY,GAAG;AACnBhB,IAAAA,MADmB;AAEnBE,IAAAA,MAFmB;AAGnBE,IAAAA;AAHmB,GAArB;AAMA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGY,YAAjC;AAAA,cACGjB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA3CQD,Q;;KAAAA,Q;AA6CTA,QAAQ,CAACmB,SAAT,GAAqB;AACnBlB,EAAAA,QAAQ,EAAEJ;AADS,EAEnBuB,UAFF;AAIA,eAAepB,QAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { node } from 'prop-types';\nimport fetchApi from '../_services/fetchApi';\nimport MachineContext from './MachineContext';\n\nfunction Provider({ children }) {\n  const [assets, setAssets] = useState([]);\n  const [status, setStatus] = useState([]);\n  const [count, setCount] = useState([]);\n\n  useEffect(() => {\n    async function fetchAssets() {\n      const result = await fetchApi();\n      console.log(result)\n      // const data = await result.data;\n      // console.log(result.data)\n      const counting = await result.reduce((acc, asset) => {\n        if (!acc[asset.status] && asset.status) {\n          acc[asset.status] = 1;\n        } else {\n          acc[asset.status] = acc[asset.status] + 1;\n        }\n        return acc;\n      }, {});\n\n      console.log(Object.keys(counting))\n\n      // const status = Object.keys(counting);\n      // const count = Object.value(counting);\n\n      setAssets(result);\n      setStatus(status);\n      setCount(count)\n    }\n    fetchAssets();\n  }, []);\n\n  const contextValue = {\n    assets,\n    status,\n    count,\n  };\n\n  return (\n    <MachineContext.Provider value={ contextValue }>\n      {children}\n    </MachineContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: node,\n}.isRequired;\n \nexport default Provider;"]},"metadata":{},"sourceType":"module"}